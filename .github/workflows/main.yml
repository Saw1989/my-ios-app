name: Build iOS IPA (unsigned)

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - master

jobs:
  build-ipa:
    runs-on: macos-latest

    env:
      # >>> HIER ANPASSEN <<<
      SCHEME: MyApp
      # Wenn du CocoaPods verwendest: WORKSPACE setzen und PROJECT leer lassen
      WORKSPACE: MyApp.xcworkspace
      # Wenn du KEINE Pods hast: PROJECT setzen und WORKSPACE leer lassen
      PROJECT: MyApp.xcodeproj

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode (optional)
        run: |
          sudo xcode-select -s /Applications/Xcode_16.app || true
          xcodebuild -version

      # NEU: erst Projekte/Schemes listen, bevor wir Pods anfassen
      - name: Print projects & schemes (pre-pods)
        run: |
          set -euo pipefail
          echo "=== Listing Xcode projects/workspaces ==="
          ls -1 *.xcodeproj || true
          ls -1 *.xcworkspace || true
          if [ -n "${WORKSPACE:-}" ]; then
            echo "=== xcodebuild -list (workspace) ==="
            xcodebuild -workspace "$WORKSPACE" -list || true
          fi
          if [ -n "${PROJECT:-}" ]; then
            echo "=== xcodebuild -list (project) ==="
            xcodebuild -project "$PROJECT" -list || true
          fi
          echo "Hinweis: Nutze einen der oben gelisteten Scheme-Namen in env.SCHEME"

      - name: Install CocoaPods (if Podfile exists)
        run: |
          set -euo pipefail
          if [ -f "Podfile" ]; then
            sudo gem install cocoapods --no-document
            # Mini-Check: Warnen, wenn noch das falsche Placeholder-Target im Podfile steht
            if grep -q 'target default_app_target do' Podfile; then
              echo "::error ::Dein Podfile enthält noch 'target default_app_target do'. Bitte ersetze es durch target 'DEIN_TARGET_NAME' do"
              exit 1
            fi
            pod install --repo-update
          else
            echo "Kein Podfile gefunden – CocoaPods wird übersprungen."
          fi

      - name: Build .app (no code signing)
        run: |
          set -euo pipefail
          DERIVED="build"
          if [ -n "${WORKSPACE:-}" ] && [ -f "$WORKSPACE" ]; then
            xcodebuild \
              -workspace "$WORKSPACE" \
              -scheme "$SCHEME" \
              -configuration Release \
              -sdk iphoneos \
              -derivedDataPath "$DERIVED" \
              CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGNING_IDENTITY=""
          else
            xcodebuild \
              -project "$PROJECT" \
              -scheme "$SCHEME" \
              -configuration Release \
              -sdk iphoneos \
              -derivedDataPath "$DERIVED" \
              CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGNING_IDENTITY=""
          fi
          echo "APP_DIR=$DERIVED/Build/Products/Release-iphoneos" >> $GITHUB_ENV

      - name: Package IPA (unsigned)
        run: |
          set -euo pipefail
          APP_PATH=$(find "$APP_DIR" -maxdepth 1 -name "*.app" -print -quit)
          if [ -z "$APP_PATH" ]; then
            echo "Keine .app gefunden unter $APP_DIR"
            exit 1
          fi
          mkdir -p Payload
          cp -R "$APP_PATH" Payload/
          IPA_NAME="$(basename "$APP_PATH" .app).ipa"
          /usr/bin/zip -r "$IPA_NAME" Payload >/dev/null
          echo "IPA_NAME=$IPA_NAME" >> $GITHUB_ENV
          echo "Erzeugt: $IPA_NAME"

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IPA_NAME }}
          path: ${{ env.IPA_NAME }}
